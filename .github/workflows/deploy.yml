name: Deploy OMI MCP Server

on:
  push:
    branches: [main]
    paths:
      - 'docker/**'
      - 'fly.toml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/omi-mcp-server

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Test connection script
        run: |
          pip install httpx python-dotenv
          python scripts/test_omi_connection.py || echo "Test script needs backend"

  deploy-fly:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event.inputs.environment == 'production'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Deploy to Fly.io
        run: |
          flyctl deploy --remote-only --config fly.toml \
            --env LOG_LEVEL=info \
            --env OMI_API_KEY=${{ secrets.OMI_API_KEY_PROD }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.environment == 'staging'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Deploy to Fly.io Staging
        run: |
          flyctl deploy --remote-only \
            --config fly.staging.toml \
            --env LOG_LEVEL=debug \
            --env OMI_API_KEY=${{ secrets.OMI_API_KEY_STAGING }}

  build-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-fly, build-docker]
    if: always()
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.deploy-fly.result }}';
            const environment = '${{ github.event.inputs.environment || 'production' }}';
            const emoji = status === 'success' ? '✅' : '❌';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status === 'success' ? 'success' : 'failure',
              description: `${emoji} Deployment to ${environment} ${status}`,
              context: 'deployment'
            });